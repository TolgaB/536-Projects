/**********************************************************************
 Java CUP specification for a parser for Wumbo programs.
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/*
 * The code below redefines method syntax_error to give better error messages
 * than just "Syntax error".
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner). */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal                TRUE;
terminal                FALSE;
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal		REPEAT;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Non-terminals
 *
 * NOTE: You will need to add more non-terminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal LinkedList       varDeclList;
non terminal VarDeclNode      varDecl;
non terminal FnDeclNode		  fnDecl;
non terminal StructDeclNode	  structDecl;
non terminal DeclListNode     structBody;
non terminal FormalListNode   formals;
non terminal FormalListNode   formalsList;
non terminal FormalDeclNode   formalDecl;
non terminal FnBodyNode       fnBody;
non terminal LinkedList       stmtList;
non terminal StmtListNode     stmt;
non terminal AssignNode       assignExp;
non terminal ExpNode          exp;
non terminal ExpNod           term;
non terminal CallExpNode      fncall;
non terminal LinkedList       actualList;
non terminal TypeNode         type;
non terminal ExpNode          loc;
non terminal IdNode           id;


/* Precedences
 *
 * NOTE: Add precedence and associativity declarations here.
 *
 */


start with program;


/* The grammar with actions
 *
 * NOTE: add more grammar rules below.
 *
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                ;
                
varDecList      ::= varDecList:vl  varDecl:v
				{: vl.addLast(v);
				   RESULT = vl;
				:}
				| /* epsilon */
				{: RESULT = new LinkedList<VarDeclNode>();
				:}
				;

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                ;
                
fnDecl          ::=type:t id:i formals:f fnBody:fB
				{: RESULT = new FnDeclnode(t, i, f, fB);
				:}               
				;

structDecl      ::= STRUCT id:i LCURLY structBody:sB RCURLY SEMICOLON
				{: RESULT = new StructDeclNode(i, sB);
				:}
				;
				
structBody      ::= structBody:sB varDecl:v
				{: sB.addLast(v);
				   RESULT = sB; 
				:}
				| varDecl:v
				{: /* THIS IS PROB WRONG */
				  RESULT = new DeclListNode(v);
				:}
				;
				
formals         ::= LPAREN RPAREN
				{: /* IDK WHAT GOES HERE */
				:}
                | LPAREN formalsList:fL RPAREN
                {: RESULT = fl;
                :}
                ;
                
formalsList     ::= formalDecl:f
				{: RESULT = new FormalListNode(f);
					/*IDK ABOUT THIS*/
				:}
                | formalDecl:f COMMA formalsList:fL
                {: /*not sure about the precedence here */
                   fL.addFirst(f);
                   RESULT = fL;
                :}
                ;
             
formalDecl      ::= type:t id:i
			    {: RESULT = new FormalDeclNode(t,i);
			    :}
                ;
                
fnBody          ::= LCURLY varDeclList:d stmtList:s RCURLY
				{: RESULT = new FnBodyNode(d,s);
				:}
                ;

stmtList        ::= stmtList:sL stmt:s
				{: sL.addLast(s);
				   RESULT = sL;
				:}
                | /* epsilon */
                {: RESULT = new LinkedList<StmtNode>();
                :}
                ;
             
stmt            ::= assignExp:a SEMICOLON 
				{: RESULT = new AssignStmtNode(a);
				:}
                | loc:s PLUSPLUS SEMICOLON
                {: RESULT = new PostIncStmtNode(s);
				:}
                | loc:s MINUSMINUS SEMICOLON
                {: RESULT = new PostDecStmtNode(s);
				:}
                | CIN READ loc:s SEMICOLON
                {: RESULT = new ReadStmtNode(s);
				:}
                | COUT WRITE exp:e SEMICOLON
                {: RESULT = new WriteStmtNode(e);
				:}
                | IF LPAREN exp:e RPAREN LCURLY varDeclList:vL stmtList:sL RCURLY
                {: RESULT = new IfStmtNode(e,vL,sL);
				:}
                | IF LPAREN exp:e RPAREN LCURLY varDeclList:vL stmtList:sL RCURLY ELSE LCURLY varDeclList:oVL stmtList:oSL RCURLY
                {: RESULT = new IfElseStmtNode(e,vL,sL, oVL, oSL);
				:}
                | WHILE LPAREN exp:e RPAREN LCURLY varDeclList:vL stmtList:sL RCURLY
                {: RESULT = new WhileStmtNode(e, vL, sL);
				:}
		| REPEAT LPAREN exp:e RPAREN LCURLY varDeclList:vL stmtList:sL RCURLY
				{: RESULT = new RepeatStmtNode(e, vL, sL);
				:}
                | RETURN exp:e SEMICOLON
                {: RESULT = new ReturnStmtNode(e);
				:}
                | RETURN SEMICOLON
                {: /* NOT SURE ABOUT THIS */
                   RESULT = new ReturnStmtNode();
				:}
                | fncall:f SEMICOLON
                {: RESULT = f;
				:}
                ;
                
assignExp       ::= loc:l ASSIGN exp:e
				{: RESULT = new AssignNode(l,e);
				:}
                ;                
                
exp             ::= assignExp:e
				{: /*IDK ABOUT THIS ONE*/
				:}
                | exp:e PLUS exp:oE
                {: RESULT = new PlusNode(e,oE);
				:}
                | exp:e MINUS exp:oE
                {: RESULT = new MinusNode(e, oE);
				:}
                | exp:e TIMES exp:oE
                {: RESULT = new TimesNode(e, oE);
				:}
                | exp:e DIVIDE exp:oE
                {: RESULT = new DivideNode(e, oE);
				:}
                | NOT exp:e
                {: RESULT = new NotNode(e);
				:}
                | exp:e AND exp:oE
                {: RESULT = new AndNode(e,oE);
				:}
                | exp:e OR exp:oE
                {: RESULT = new OrNode(e,oE);
				:}
                | exp:e EQUALS exp:oE
                {: RESULT = new EqualsNode(e,oE);
				:}
                | exp:e NOTEQUALS exp:oE
                {: RESULT = new NotEqualsNode(e,oE);
				:}
                | exp:e LESS exp:oE
                {: RESULT = new LessNode(e,oE);
				:}
                | exp:e GREATER exp:oE
                {: RESULT = new GreaterNode(e,oE);
				:}
                | exp:e LESSEQ exp:oE
                {: RESULT = new LessEqNode(e,oE);
				:}
                | exp:e GREATEREQ exp:oE
                {: RESULT = new GreaterEqNode(e,oE);
				:}
                | MINUS term:t
                {: RESULT = new UnaryMinusNode(t);
				:}
                | term:t
                {: RESULT = t;
				:}
                ;       
                
term            ::= loc:l
				{: RESULT = l;
				:}
                | INTLITERAL
                {: RESULT = new IntLitNode(INTLITERAL.lineNum, INTLITERAL.charNum,INTLITERAL.intVal);
				:}
                | STRINGLITERAL
                {: RESULT = new StringLitNode(STRINGLITERAL.lineNum, STRINGLITERAL.charNum, STRINGLITERAL.strVal);
				:}
                | TRUE
                {: RESULT = new TrueNode(TRUE.lineNum, TRUE.charNum);
				:}
                | FALSE
                {: RESULT = new FalseNode(FALSE.lineNum, FALSE.charNum);
				:}
                | LPAREN exp:e RPAREN
                {: RESULT = e;
				:}
                | fncall:f
                {: RESULT = f;
				:}
                ;        
                
 fncall         ::=  id:i LPAREN RPAREN 
 				{: RESULT = new CallExpNode(i);
 				:}
                | id:i LPAREN actualList:a RPAREN  
                {: RESULT = new CallExpNode(i, a);
                :}
                ;               
                
actualList      ::= exp:e
				{:  RESULT = new LinkedList<ExpNode>().add(e);
				:}
                | actualList:a COMMA exp:e
                {: a.addLast(e);
                   RESULT = a;
                :}
                ;
				
type            ::= INT
                {: RESULT = new IntNode();
                :}
                | BOOL
                {: RESULT = new BoolNode();
                :}
                | VOID 
                {: RESULT = new VoidNode();
                :}
                ;
                
loc             ::= id:i
				{: RESULT = i;
				:}
                | loc:l DOT id:i                
				{: RESULT = new DotAccessExpNode(i,l);
				:}
				;
				
id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;
