void func() {
    if ((b == (-1))) {
        x = ((4 + (3 * 5)) - y);
        while (c) {
            y = ((y * 2) + x);
        }
    } else {
        x = 0;
    }
    x = 3;
    return;
}
void varTest() {
    int test;
    void lol;
    bool hi;
}
void minusTest() {
    return (-5);
}
void test() {
    x++;
    x--;
}
void returnTest() {
    return thisExp;
}
void dotTest() {
    ((((loc1).loc2).loc3).loc4).loc5 = "test";
}
void funcPrecTest() {
    var1 = func(var2,var3);
    var1 = (func(var2,var3) + 1);
}
void notTest() {
    while ((!a)) {
    }
    while ((!(!a))) {
    }
    while ((a && b)) {
    }
    while ((a || b)) {
    }
    while (((a || b) && (b || c))) {
    }
    while ((a > b)) {
    }
    while ((a < b)) {
    }
    while (((a >= b) || (b <= a))) {
    }
    while ((a == b)) {
    }
    while ((a != b)) {
    }
    while (true) {
    }
    while (false) {
    }
}
void repeatTest() {
    repeat ((a == b)) {
        int x;
    }
}
void newPrecTest() {
    x = ((((5 + 3) + 3) + 2) + 1);
    x = (((5 + (4 * 3)) + 5) + (2 / 3));
}
void precTest() {
    x = (x = (5 + 2));
    (a).b++;
    x = (x = (y = (z = (1 + 2))));
    x = (x = (y = (z = 3)));
    cout << (x = 1);
    if ((var1 = var2)) {
    }
    cout << (var3 = var4);
    cin >> x;
}
int x(int y,int other) {
    z++;
    return z;
}
struct testStruct { 
int x;
int y;
int z;
};
void otherFunc() {
    someFunc(x,y);
}
