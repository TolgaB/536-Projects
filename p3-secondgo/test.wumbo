//Very general test for if and while loops along with some declarations and precedences
void func() {
if (b == -1) { x = 4+3*5-y; while (c) { y = y*2+x; } } else { x = 0; }
x = 3;
return;
}

//test diff variable
void varTest() {
int test;
void lol;
bool hi;
}

//test unary minus
void minusTest(){
return -5;
}

//test plusplus and minusminus
void test() {
x++;
x--;
}

//testing return
void returnTest() {
return thisExp;
}


//testing dot access paren (piazza)
void dotTest() {
//check to make sure dot operator is left assoc
loc1.loc2.loc3.loc4.loc5 = "test";
}


//testing function paren (piazza)
void funcPrecTest() {
var1 = func(var2, var3);
var1 = func(var2, var3) + 1;
}

//test while loops with various conditions
void notTest() {
while(!a){}
while(!!a){}
while(a &&b){}
while(a||b){}
while((a||b)&&(b||c)){}
while(a>b){}
while(a<b){}
while((a>=b)||(b<=a)){}
while(a==b){}
while(a!=b){}
while(true){}
while(false){}
}

//test repeat loops
void repeatTest(){
repeat (a==b) {int x;}
}

void newPrecTest() {
//check the right associative prop
x = 5+3+3+2+1;
//check the right assoc and precedence
x = 5+4*3+5+2/3;
}

//testing precedence
void precTest() {
x=x=5+2;
a.b++;
x = x = y = z = 1 + 2 ;
x = x = y = z = 3;
cout << x = 1;
if (var1 = var2) {}
//test read and write
cout << var3 = var4;
cin >> x;
}


//advanced func decl test
//also checking formal list
int x(int y,int other) {
  z++;
  return z;
}

//struct declaration testing

struct testStruct {
int x;
int y;
int z;
};

//test func calling/actuallist
void otherFunc() {
someFunc(x,y);
}
