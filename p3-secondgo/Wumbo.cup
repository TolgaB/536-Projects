/**********************************************************************
 Java CUP specification for a parser for Wumbo programs.
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/*
 * The code below redefines method syntax_error to give better error messages
 * than just "Syntax error".
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner). */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal		REPEAT;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Non-terminals
 *
 * NOTE: You will need to add more non-terminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal LinkedList       varDeclList;
non terminal VarDeclNode      varDecl;
non terminal FnDeclNode       fnDecl;
non terminal StructDeclNode   structDecl;
non terminal LinkedList		  structBody;
non terminal FormalsListNode  formals;
non terminal LinkedList 	  formalsList;
non terminal FormalDeclNode	  formalDecl;
non terminal FnBodyNode		  fnBody;
non terminal LinkedList       stmtList;
non terminal StmtNode         stmt;
non terminal AssignNode		  assignExp;
non terminal ExpNode 		  exp;
non terminal ExpNode  		  term;
non terminal CallExpNode      fncall;
non terminal LinkedList       actualList;
non terminal TypeNode         type;
non terminal ExpNode          loc;            
non terminal IdNode           id;










/* Precedences
 *
 * NOTE: Add precedence and associativity declarations here.
 *
 */
precedence left DOT;
precedence right ASSIGN;
precedence nonassoc OR;
precedence nonassoc AND;
precedence nonassoc LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQUALS;
precedence left PLUS, MINUS, PLUSPLUS;
precedence left TIMES, DIVIDE;
precedence left MINUSMINUS, NOT;

start with program;


/* The grammar with actions
 *
 * NOTE: add more grammar rules below.
 *
 */
program         ::= declList: d
                {:
                RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                ;

varDeclList     ::= varDeclList:vl varDecl:v
				{: vl.addLast(v);
				   RESULT = vl;
				:}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                ;
               
fnDecl          ::= type:t id:i formals:f fnBody:fb
				{: RESULT = new FnDeclNode(t,i,f,fb);
				:}
                ;                
               
structDecl      ::= STRUCT id:i LCURLY structBody:sb RCURLY SEMICOLON
				{: RESULT = new StructDeclNode(i, new DeclListNode(sb));
				:}
                ;               
                
structBody      ::= structBody:sb varDecl:v
				{: sb.addLast(v);
				   RESULT = sb;
				:}
                | varDecl:v
                {: LinkedList<DeclNode> temp = new LinkedList<DeclNode>();
                   temp.addLast(v);
                   RESULT = temp;
                :}
                ;                
                
formals         ::= LPAREN RPAREN
				{: RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
				:}
                | LPAREN formalsList:f RPAREN
                {: RESULT = new FormalsListNode(f);
                :}
                ;

formalsList     ::= formalDecl:f
				{: LinkedList<FormalDeclNode> temp = new LinkedList<FormalDeclNode>();
				   temp.addLast(f);
				   RESULT = temp;
				:}
                | formalDecl:f COMMA formalsList:fl
                {: fl.addFirst(f);
                   RESULT = fl;
                :} 
                ;

formalDecl      ::= type:t id:i        
				{: RESULT = new FormalDeclNode(t,i);
				:}
                ;

fnBody          ::= LCURLY varDeclList:v stmtList:s RCURLY
				{: RESULT = new FnBodyNode(new DeclListNode(v), new StmtListNode(s));
				:}
                ;

stmtList        ::= stmtList:st stmt:s
				{: st.addLast(s);
				   RESULT = st;
				:}
                | /* epsilon */
                {: RESULT = new LinkedList<StmtNode>();
                :}
                ;

stmt            ::= assignExp:a SEMICOLON
				{: RESULT = new AssignStmtNode(a);
				:}
                | loc:l PLUSPLUS SEMICOLON
                {: RESULT = new PostIncStmtNode(l);
				:}
                | loc:l MINUSMINUS SEMICOLON
                {:  RESULT = new PostDecStmtNode(l);
				:}
                | CIN READ loc:l SEMICOLON
                {:  RESULT = new ReadStmtNode(l);
				:}
                | COUT WRITE exp:e SEMICOLON
                {: RESULT = new WriteStmtNode(e);
				:}
                | IF LPAREN exp:e RPAREN LCURLY varDeclList:v stmtList:s RCURLY
                {: RESULT = new IfStmtNode(e,new DeclListNode(v),new StmtListNode(s));
				:}
                | IF LPAREN exp:e RPAREN LCURLY varDeclList:v stmtList:s RCURLY ELSE LCURLY varDeclList:ov stmtList:os RCURLY
                {: RESULT = new IfElseStmtNode(e,new DeclListNode(v),new StmtListNode(s),new DeclListNode(ov),new StmtListNode(os));
				:}
                | WHILE LPAREN exp:e RPAREN LCURLY varDeclList:v stmtList:s RCURLY
                {: RESULT = new WhileStmtNode(e,new DeclListNode(v),new StmtListNode(s));
				:}
		| REPEAT LPAREN exp:e RPAREN LCURLY varDeclList:v stmtList:s RCURLY
				{: RESULT = new RepeatStmtNode(e,new DeclListNode(v),new StmtListNode(s));
				:}
                | RETURN exp:e SEMICOLON
                {: RESULT = new ReturnStmtNode(e);
				:}
                | RETURN SEMICOLON
                {: /*IDK about this*/ 
                   RESULT = new ReturnStmtNode(null);
				:}
                | fncall:e SEMICOLON
                {: RESULT = new CallStmtNode(e);
				:}
                ;

assignExp       ::= loc:l ASSIGN exp:e
				{: 
				RESULT = new AssignNode(l,e);
				:}
                ;
                
exp             ::= assignExp:a
				{: RESULT = a;
				:}
                | exp:e PLUS exp:oE
                {: RESULT = new PlusNode(e,oE);
				:}
                | exp:e MINUS exp:oE
                {: RESULT = new MinusNode(e,oE);
				:}
                | exp:e TIMES exp:oE
                {: RESULT = new TimesNode(e,oE);
				:}
                | exp:e DIVIDE exp:oE
                {: RESULT = new DivideNode(e,oE);
				:}
                | NOT exp:e
                {: RESULT = new NotNode(e);
				:}
                | exp:e AND exp:oE
                {: RESULT = new AndNode(e,oE);
				:}
                | exp:e OR exp:oE
                {: RESULT = new OrNode(e,oE);
				:}
                | exp:e EQUALS exp:oE
                {: RESULT = new EqualsNode(e,oE);
				:}
                | exp:e NOTEQUALS exp:oE
                {: RESULT = new NotEqualsNode(e,oE);
				:}
                | exp:e LESS exp:oE
                {: RESULT = new LessNode(e,oE);
				:}
                | exp:e GREATER exp:oE
                {: RESULT = new GreaterNode(e,oE);
				:}
                | exp:e LESSEQ exp:oE
                {: RESULT = new LessEqNode(e,oE);
				:}
                | exp:e GREATEREQ exp:oE
                {: RESULT = new GreaterEqNode(e,oE);
				:}
                | MINUS term:t
                {: RESULT = new UnaryMinusNode(t);
				:}
                | term:t
                {: RESULT = t;
				:}
                ;

term            ::= loc:l
				{: /* IDK */
				   RESULT = l;
				:}
                | INTLITERAL:i
                {: RESULT = new IntLitNode(i.linenum, i.charnum, i.intVal);
				:}
                | STRINGLITERAL:s
                {: RESULT = new StringLitNode(s.linenum, s.charnum, s.strVal);
				:}
                | TRUE:t
                {: RESULT = new TrueNode(t.linenum, t.charnum);
				:}
                | FALSE:f
                {: RESULT = new FalseNode(f.linenum, f.charnum);
				:}
                | LPAREN exp:e RPAREN
                {: RESULT = e;
				:}
                | fncall:f
                {: RESULT = f;
				:}
                ;

fncall          ::=  id:i LPAREN RPAREN
				{: RESULT = new CallExpNode(i,null);
				:}
                | id:i LPAREN actualList:a RPAREN  
                {: RESULT = new CallExpNode(i,new ExpListNode(a));
                :}
                ;

actualList      ::= exp:e
				{: LinkedList<ExpNode> temp = new LinkedList<ExpNode>();
				   temp.add(e); 
				   RESULT = temp;
				:}
                | actualList:a COMMA exp:e
                {: a.addLast(e);
                   RESULT = a;
                :}
                ;

type            ::= INT
                {: RESULT = new IntNode();
                :}
                | BOOL
                {: RESULT = new BoolNode();
                :}
                | VOID
                {: RESULT = new VoidNode();
                :}
                ;

loc             ::= id:i
				{: RESULT = i;
				:}
                | loc:l DOT id:i
                {: RESULT = new DotAccessExpNode(l,i);
                :}
				;

id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;
